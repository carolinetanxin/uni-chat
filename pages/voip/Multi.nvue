<!--export default class CallState {-->
<!--static STATUS_IDLE = 0;-->
<!--static STATUS_OUTGOING = 1;-->
<!--static STATUS_INCOMING = 2;-->
<!--static STATUS_CONNECTING = 3;-->
<!--static STATUS_CONNECTED = 4;-->
<!--}-->
<template>
    <div style="flex: 1; display: flex; flex-direction: column; ">
        <div v-if="session" class="container">
            <!--audio-->
            <div class="content-container">
                <!--self-->
                <div class="participant-container">
                    <div v-if="audioOnly || callState !== 4 || selfUserInfo._isVideoMuted"
                         class="flex-column flex-justify-center flex-align-center">
                        <img class="avatar" :src="selfUserInfo.portrait">
                        <text class="desc">我</text>
                    </div>
                    <UIKit-Video-CallView v-else
                                          class="video me"
                                          ref="localVideo"
                    />
                </div>

                <!--participants-->
                <div v-for="(participant) in participantUserInfos" :key="participant.uid"
                     class="participant-container">
                    <div v-if="audioOnly || callState !== 4 || participant._isVideoMuted || !participant._receiveVideoTrack"
                         class="flex-column flex-justify-center flex-align-center">
                        <img class="avatar" :src="participant.portrait" :alt="participant">
                        <text class="single-line desc">{{ userName(participant) }}</text>
                    </div>
                    <UIKit-Video-CallView v-else
                                          class="video"
                                          :ref="'remoteVideo-' + participant.uid"
                                          @click="switchVideoType(participant.uid, participant._isScreenSharing)"
                    />
                </div>
                <!--add more-->
                <!--通话建立成功之后，才允许邀请新参与者-->
                <div v-if="callState === 4/*connect*/ && participantUserInfos.length < 8"
                     class="participant-container">
                    <img @click="invite" class="avatar" src="@/assets/images/add.png">
                </div>
            </div>

            <!--actions-->
            <!--incoming-->
            <div v-if="callState === 2" class="action-container">
                <div class="action">
                    <img @click="hangup" class="action-img" src='@/assets/images/av_hang_up.png'/>
                </div>
                <div class="action">
                    <img @click="answer" class="action-img" src='@/assets/images/av_video_answer.png'/>
                </div>
                <div v-if="!audioOnly" class="action">
                    <img @click="down2voice" class="action-img" src='@/assets/images/av_float_audio.png'/>
                    <text class="desc">切换到语音聊天</text>
                </div>
            </div>
            <!--outgoing-->
            <div v-if="callState === 1 || callState === 3" class="action-container">
                <div class="action">
                    <img @click="hangup" class="action-img" src='@/assets/images/av_hang_up.png'/>
                </div>
            </div>

            <!--connected-->
            <div v-if="callState === 4" class="duration-action-container">
                <text>{{ duration }}</text>
                <div class="actions">
                    <div class="action">
                        <img @click="hangup" class="action-img" src='@/assets/images/av_hang_up.png'/>
                    </div>
                    <div class="action">
                        <img v-if="!session.audioMuted" @click="mute" class="action-img"
                             src='@/assets/images/av_mute.png'/>
                        <img v-else @click="mute" class="action-img" src='@/assets/images/av_mute_hover.png'/>
                        <text class="desc">静音</text>
                    </div>
                    <div class="action">
                        <img v-if="!session.videoMuted" @click="muteVideo" class="action-img"
                             src='@/assets/images/av_conference_video.png'/>
                        <img v-else @click="muteVideo" class="action-img"
                             src='@/assets/images/av_conference_video_mute.png'/>
                        <text class="desc">关闭摄像头</text>
                    </div>
                    <div v-if="!audioOnly && false" class="action">
                        <img @click="screenShare" class="action-img" src='@/assets/images/av_share.png'/>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
    import avengineKit from "../../wfc/av/engine/avengineKit";
    import CallSessionCallback from "../../wfc/av/engine/callSessionCallback";
    import CallState from "../../wfc/av/engine/callState";
    // TODO 里面引用 wfc 会导致 require is not defined
    // import MultiCallOngoingMessageContent from "../../wfc/av/messages/multiCallOngoingMessageContent";
    import VideoType from "../../wfc/av/engine/videoType";
    import Config from "../../config";

    export default {
        name: 'Multi',
        data() {
            return {
                wfc: getApp().wfc,
                session: null,
                audioOnly: false,
                callState: 1,
                initiatorUserInfo: null,
                participantUserInfos: [],
                groupMemberUserInfos: [],

                startTimestamp: 0,
                currentTimestamp: 0,
                videoInputDeviceIndex: 0,
                broadcastMultiCallOngoingTimer: 0,
                autoPlayInterval: 0,
                showWebrtcTip: false,

                ringAudio: null,
            }
        },
        onLoad(option) {
            console.log('voip/Multi onLoad')
            // #ifdef APP-NVUE
            const eventChannel = this.$scope.eventChannel; // 兼容APP-NVUE
            // #endif
            // #ifndef APP-NVUE
            const eventChannel = this.getOpenerEventChannel();
            // #endif
            // 监听openerUsers事件，获取上一页面通过eventChannel传送到当前页面的数据
            eventChannel.on('callOptions', (options) => {
                console.log('callOptions', options, getApp(), getApp().wfc)
                this.session = options.callSession;
                this.callState = this.session.state;
                this.audioOnly = this.session.audioOnly;
            })
        },
        methods: {
            switchVideoType(userId, screenSharing) {
                // TODO
                // let subscriber = this.session.getSubscriber(userId, screenSharing);
                // if (subscriber) {
                //     let currentVideoType = subscriber.currentVideoType;
                //     let videoType = VideoType.NONE;
                //     if (currentVideoType === VideoType.NONE) {
                //         videoType = VideoType.BIG_STREAM;
                //     } else if (currentVideoType === VideoType.BIG_STREAM) {
                //         videoType = VideoType.SMALL_STREAM;
                //     } else if (currentVideoType === VideoType.SMALL_STREAM) {
                //         videoType = VideoType.NONE;
                //     }
                //     this.session.setParticipantVideoType(userId, screenSharing, videoType);
                // }
            },
            setupSessionCallback() {
                let sessionCallback = new CallSessionCallback();

                sessionCallback.didChangeState = (state) => {
                    console.log('didChangeState', typeof state, state, this.callState)
                    this.callState = state;

                    if (state === CallState.STATUS_CONNECTED) {
                        if (this.startTimestamp === 0) {
                            this.startTimestamp = new Date().getTime();
                            this.timer = setInterval(() => {
                                this.currentTimestamp = new Date().getTime();
                            }, 1000)
                        }

                        this.$nextTick(() => {
                            console.log('xxxx setLocalView', this.$refs.localVideo.ref)
                            avengineKit.setLocalVideoView(this.selfUserInfo.uid, this.$refs.localVideo.ref)
                            this.participantUserInfos.forEach(u => {
                                console.log('xxxxxx', u.uid, this.$refs['remoteVideo-' + u.uid][0].ref, this.$refs['remoteVideo-' + u.uid][0]);
                                avengineKit.setRemoteVideoView(u.uid, this.$refs['remoteVideo-' + u.uid][0].ref, false)
                            });
                        });
                    } else if (state === CallState.STATUS_IDLE) {
                        if (this.timer) {
                            clearInterval(this.timer);
                        }
                    }
                };

                sessionCallback.didChangeMode = (audioOnly) => {
                    this.audioOnly = audioOnly;
                };

                sessionCallback.didCreateLocalVideoTrack = (stream) => {
                };

                sessionCallback.didReceiveRemoteVideoTrack = (userId, screenSharing) => {
                    console.log('didReceiveRemoteVideoTrack', userId, screenSharing)
                    this.participantUserInfos.forEach(u => {
                        if (u.uid === userId) {
                            u._receiveVideoTrack = true;
                        }
                    });
                };

                sessionCallback.didParticipantJoined = (userId, screenSharing) => {
                    let profile = avengineKit.getParticipantProfile(userId, screenSharing);
                    let userInfo = this.wfc.getUserInfo(userId)
                    userInfo._isVideoMuted = profile.videoMuted;
                    userInfo._isAudioMuted = profile.audioMuted;
                    userInfo._isAudience = profile.audience;
                    console.log('didParticipantJoined', userInfo)
                    this.participantUserInfos.push(userInfo);

                    if (this.callState === CallState.STATUS_CONNECTED) {
                        this.$nextTick(() => {
                            avengineKit.setRemoteVideoView(this.selfUserInfo.uid, this.$refs['remoteVideo-' + userId][0].ref, false)
                        })
                    }
                }

                sessionCallback.didParticipantLeft = (userId) => {
                    console.log('didParticipantLeft', userId, this.participantUserInfos.length)
                    this.participantUserInfos = this.participantUserInfos.filter(p => p.uid !== userId);
                }

                sessionCallback.didCallEndWithReason = (reason) => {
                    console.log('callEndWithReason', reason)
                    this.session = null;
                }

                sessionCallback.didVideoMuted = (userId, muted) => {
                    this.participantUserInfos.forEach(u => {
                        if (u.uid === userId) {
                            u._isVideoMuted = muted;
                        }
                    })
                };

                sessionCallback.didMediaLostPacket = (media, lostPacket) => {
                    if (lostPacket > 6) {
                        console.log('您的网络不好');
                    }
                };

                sessionCallback.didUserMediaLostPacket = (userId, media, lostPacket, uplink) => {
                    //如果uplink ture对方网络不好，false您的网络不好
                    //接收方丢包超过10为网络不好
                    if (lostPacket > 10) {
                        if (uplink) {
                            let userInfos = this.participantUserInfos.filter(u => u.uid === userId);
                            if (userInfos && userInfos.length > 0) {
                                console.log(userInfos[0].displayName, "网络不好");
                            }
                        } else {
                            console.log('您的网络不好');
                        }
                    }
                };
                sessionCallback.didChangeInitiator = (initiator) => {
                    this.initiatorUserInfo = this.wfc.getUserInfo(initiator);
                    if (!this.broadcastMultiCallOngoingTimer) {
                        this.broadcastMultiCallOngoingTimer = setInterval(this.broadcastMultiCallOngoing, 200)
                    }
                }

                getApp().avengineKit.sessionCallback = sessionCallback;
            },

            answer() {
                avengineKit.answerCall(this.session.callId, false)
            },

            hangup() {
                avengineKit.endCall(this.session.callId);
            },

            switchCamera() {
                if (!this.session || this.session.isScreenSharing()) {
                    return;
                }
                // The order is significant - the default capture devices will be listed first.
                // navigator.mediaDevices.enumerateDevices()
                navigator.mediaDevices.enumerateDevices().then(devices => {
                    devices = devices.filter(d => d.kind === 'videoinput');
                    if (devices.length < 2) {
                        console.log('switchCamera error, no more video input device')
                        return;
                    }
                    this.videoInputDeviceIndex++;
                    if (this.videoInputDeviceIndex >= devices.length) {
                        this.videoInputDeviceIndex = 0;
                    }
                    this.session.setVideoInputDeviceId(devices[this.videoInputDeviceIndex].deviceId)
                    console.log('setVideoInputDeviceId', devices[this.videoInputDeviceIndex]);
                })
            },

            mute() {
                let toMute = this.session.audioMuted ? false : true;
                this.selfUserInfo._isAudioMuted = toMute;
                this.session.muteAudio(toMute)
            },

            muteVideo() {
                let toMute = this.session.videoMuted ? false : true;
                this.selfUserInfo._isVideoMuted = toMute;
                this.session.muteVideo(toMute)
            },

            down2voice() {
                this.session.downgrade2Voice();
            },

            screenShare() {
                if (this.session.isScreenSharing()) {
                    this.session.stopScreenShare();
                } else {
                    this.session.startScreenShare();
                }
            },

            invite() {
                let successCB = users => {
                    let userIds = users.map(u => u.uid);
                    this.session.inviteNewParticipants(userIds);
                }
                this.$pickContact({
                    successCB,
                    users: this.session.groupMemberUserInfos,
                    initialCheckedUsers: [...this.session.participantUserInfos, this.session.selfUserInfo],
                    uncheckableUsers: [...this.session.participantUserInfos, this.session.selfUserInfo],
                    showCategoryLabel: false,
                    confirmTitle: '确定',
                });
            },

            userName(user) {
                let name;
                if (user.groupAlias) {
                    name = user.groupAlias;
                } else if (user.friendAlias) {
                    name = user.friendAlias;
                } else if (user.displayName) {
                    name = user.displayName;
                } else {
                    name = user.name;
                }
                return name;
            },

            timestampFormat(timestamp) {
                timestamp = ~~(timestamp / 1000);
                let str = ''
                let hour = ~~(timestamp / 3600);
                str = hour > 0 ? ((hour < 10 ? "0" : "") + hour + ':') : '';
                let min = ~~((timestamp % 3600) / 60);
                str += (min < 10 ? "0" : "") + min + ':'
                let sec = ~~((timestamp % 60));
                str += (sec < 10 ? "0" : "") + sec
                return str;
            },

            broadcastMultiCallOngoing() {
                let participants = this.participantUserInfos.map(pu => pu.uid).filter(uid => uid !== this.selfUserInfo.uid)
                let ongoing = new MultiCallOngoingMessageContent(this.session.callId, this.session.initiatorId, this.session.audioOnly, participants);
                this.wfc.sendConversationMessage(this.session.conversation, ongoing);
            }
        },

        mounted() {
            let supportConference = avengineKit.startConference !== undefined
            if (!supportConference) {
                let host = window.location.host;
                if (host.indexOf('wildfirechat.cn') === -1 && host.indexOf('localhost') === -1) {
                    for (const ice of Config.ICE_SERVERS) {
                        if (ice[0].indexOf('turn.wildfirechat.net') >= 0) {
                            // 显示自行部署 turn 提示
                            this.showWebrtcTip = true;
                            setTimeout(() => {
                                this.showWebrtcTip = false;
                            }, 10 * 1000)
                            break
                        }
                    }
                }
            }
            this.setupSessionCallback();

            let participantProfiles = avengineKit.getParticipantProfiles();
            for (const p of participantProfiles) {
                let userInfo = this.wfc.getUserInfo(p.userId);
                userInfo._isVideoMuted = p.videoMuted;
                userInfo._isAudioMuted = p.audioMuted;
                userInfo._isAudience = p.audience;
                this.participantUserInfos.push(userInfo);
            }
        },

        beforeDestroy() {
            getApp().avengineKit.endCall(this.session.callId);

            if (this.broadcastMultiCallOngoingTimer) {
                clearInterval(this.broadcastMultiCallOngoingTimer);
            }
        },

        computed: {
            duration() {
                if (this.currentTimestamp <= 0) {
                    return '00:00'
                }
                let escapeMillis = this.currentTimestamp - this.startTimestamp;
                return this.timestampFormat(escapeMillis)
            },
            selfUserInfo() {
                let userInfo = this.wfc.getUserInfo(this.wfc.getUserId(), false)
                return userInfo;
            },
        },
    }
</script>

<style lang="css" scoped>

    .container {
        width: 750rpx;
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .content-container {
        width: 750rpx;
        position: relative;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
    }

    .participant-container {
        display: flex;
        width: 200px;
        height: 220px;
        /*background-color: rebeccapurple;*/

        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .participant-container .desc {
        max-height: 20px;
        color: white;
    }

    .duration-action-container {
        background: lightgrey;
        width: 750rpx;
        height: 180rpx;
        position: absolute;
        left: 0;
        bottom: 0;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding-bottom: 20px;
    }

    .duration-action-container .desc {
        color: white;
        padding: 10px 0;
    }

    .duration-action-container .actions {
        width: 750rpx;
        display: flex;
        flex-direction: row;
        justify-content: space-around;
    }

    .action-container {
        width: 750rpx;
        height: 160rpx;
        position: absolute;
        bottom: 0;
        left: 0;
        display: flex;
        flex-direction: row;
        justify-content: space-around;
        padding-bottom: 20px;
    }

    .action {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        font-size: 12px;
        color: white;
    }

    .avatar {
        width: 200px;
        height: 200px;
    }

    .action-img {
        width: 60px;
        height: 60px;
    }

    .video {
        width: 200px;
        height: 200px;
    }

    .video.me {
        transform: scaleX(-1);
    }

    .webrtc-tip {
        position: absolute;
        color: red;
        left: 0;
        top: 0;
        z-index: 999;
    }
</style>
